package com.evision.config;

import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.util.Arrays;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.oauth2.jwt.JwtDecoder;
import org.springframework.security.oauth2.jwt.JwtEncoder;
import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;
import org.springframework.security.oauth2.jwt.NimbusJwtEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import com.nimbusds.jose.jwk.JWK;
import com.nimbusds.jose.jwk.JWKSet;
import com.nimbusds.jose.jwk.RSAKey;
import com.nimbusds.jose.jwk.source.ImmutableJWKSet;
import com.nimbusds.jose.jwk.source.JWKSource;
import com.nimbusds.jose.proc.SecurityContext;

@Configuration
@EnableWebSecurity
public class WebSecurityConfig {


	
	@Value("${jwt.public.key}")
	private RSAPublicKey key;
	@Value("${jwt.private.key}")
	private RSAPrivateKey priv;

//	private Jwtutil jwtUtil;
	@Autowired
	private UserDetailsService userService;



//	@Bean
//	SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
//		http.csrf(csrf -> csrf.disable()) // Avalie se é realmente necessário desabilitar o CSRF
//				.authorizeHttpRequests(authorize -> authorize
//						.requestMatchers("/", "/src/**", "/static/**", "/css/**", "/views/**", "/js/**",
//								"/js/controllerLogin.js", "/cadastro", "/login/api/**").permitAll()
//						.requestMatchers("/api/usuarios/cad").permitAll()
//						.requestMatchers("/login/api/login").permitAll()
//						.requestMatchers("/cadastro").permitAll()
//						.requestMatchers("/").permitAll()
//						.anyRequest().authenticated())
//				.formLogin(form -> form.loginPage("/")
//						 .loginProcessingUrl("private")
//						 .defaultSuccessUrl("/login", true)
//						// .successForwardUrl("/listagem")
//						.failureUrl("/cadastro"))
//				.exceptionHandling(exception -> exception.accessDeniedPage("/negado"))
//				.httpBasic(Customizer.withDefaults())
//				.oauth2ResourceServer( conf -> conf.jwt(jwt -> jwt.decoder(jwtDecoder())));
//		return http.build();
//	}
	  @Bean
	  SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		  http.csrf(csrf -> csrf.disable())
		  .authorizeHttpRequests(authorize -> authorize
		    .requestMatchers("/", "/src/**", "/static/**", "/css/**", "/views/**", "/js/**",
						"/js/controllerLogin.js", "/cadastro", "/login/api/**").permitAll()
		    .anyRequest().authenticated()
		    .and()
		    .httpBasic(Customizer.withDefaults())
		        .defaultTargetUrl("/")
		    .and()
		    .oauth2ResourceServer(
		        conf -> conf.jwt(
		            jwt -> jwt.decoder(jwtDecoder())));
	    return http.build();
	  }

	@Bean
	JwtDecoder jwtDecoder() {
		return NimbusJwtDecoder.withPublicKey(this.key).build();
	}

	@Bean
	JwtEncoder jwtEncoder() {
		JWK jwk = new RSAKey.Builder(this.key).privateKey(this.priv).build();
		JWKSource<SecurityContext> jwks = new ImmutableJWKSet<>(new JWKSet(jwk));
		return new NimbusJwtEncoder(jwks);
	}

	@Bean
	CorsConfigurationSource corsConfigurationSource() {
		CorsConfiguration configuration = new CorsConfiguration().applyPermitDefaultValues();
		configuration.setAllowedMethods(Arrays.asList("POST", "GET", "PUT", "DELETE", "OPTIONS"));
		final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
		source.registerCorsConfiguration("/**", configuration);
		return source;
	}

	public void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.userDetailsService(userService).passwordEncoder(bCryptPasswordEncoder());
	}

	@Bean
	AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration)
			throws Exception {
		return authenticationConfiguration.getAuthenticationManager();
	}

//	
//    
	@Bean
	BCryptPasswordEncoder bCryptPasswordEncoder() {
		return new BCryptPasswordEncoder();
	}
//    
//	 @Bean
//	 LogoutFilter logoutFilter() {
//	     LogoutFilter logoutFilter = new LogoutFilter(
//	         "/logout",
//	         new SecurityContextLogoutHandler());
//	     logoutFilter.setFilterProcessesUrl("/logout");
//	     return logoutFilter;
//	 }

}