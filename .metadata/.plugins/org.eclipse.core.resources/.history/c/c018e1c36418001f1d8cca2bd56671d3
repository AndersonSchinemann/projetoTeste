package com.evision.useraccess.controller;

import java.util.List;
import java.util.Map;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.Objects;

import com.evision.useraccess.model.Profile;
import com.evision.useraccess.model.Usuario;
import com.evision.useraccess.service.UsuarioService;




//@CrossOrigin(origins = "http://localhost:8080/")
@RestController
@RequestMapping("/api/usuarios")
public class UsuarioController {

	@Autowired
	private UsuarioService usuarioService;
	
	@Autowired
    private ObjectMapper objectMapper;
	
	boolean algumItemNulo = false;
	
    public UsuarioController() {
      
    }
	
    @PostMapping("/cad")
    public ResponseEntity<String> cadastrarUsuario(@RequestBody Map<String, Object> usuarioData) throws Exception {
    	 
    	//System.out.println("Cadastro");
    	Usuario usuario = (Usuario) objectMapper.convertValue(usuarioData, Usuario.class);
    	Profile profile = new Profile(); 
    	profile.setName(usuarioData.get("perfil").toString()); 
    	usuario.setProfile(profile);

    	try {
    		usuarioService.save(usuario);
    		return ResponseEntity.ok().build();
    	} catch (Exception e) {
    		throw new Exception("Exception occurred for stack trace purposes", e);
    		//return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
    	}

    }
    @GetMapping
    public List<Usuario> getAllUsuarios() {
    	System.out.println("Todos os Usuarios");
        return usuarioService.getAllUsuarios();
    }
    @GetMapping(params ="/{id}")
    public Usuario getUsuarioById(@PathVariable Long id) {
    	//System.out.println("Hello, world!");
        return usuarioService.getUsuarioById(id);
    }
    
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteUsuario(@PathVariable int id) {
        //boolean deletado = usuarioService.deleteUsuario(id);
        //System.out.println(deletado);
    	try {
    		usuarioService.deleteUsuario(id);
    		return ResponseEntity.ok().build();
    	} catch (Exception e) {
    		return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
    	}
    }
    
    @GetMapping("/{pesquisa}")
    public List<Usuario> pesquisaUsuario(@RequestParam(required = false) String searchText) {
        // Lógica para pesquisar usuários com base no searchText
    	boolean searchMode=true;
        return usuarioService.pesquisaUsuario(searchText,searchMode);
    }
    
    @PutMapping("/{id}")
    public ResponseEntity<Usuario> atualizarUsuario(@PathVariable int id, @RequestBody Usuario usuarioAtualizado) {
        System.out.println("Atualizado");

        // Certifique-se de definir o ID do usuário atualizado com o ID da URL
        usuarioAtualizado.setId(id);
        try {
        	usuarioService.atualizarUsuario(usuarioAtualizado);
    		return ResponseEntity.ok().build();
    	} catch (Exception e) {
    		return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
    	}
    }
    @PostMapping("/logout")
    public ResponseEntity<String> logout() {
        // Lógica de logout
        //SecurityContextHolder.clearContext(); // Limpa o contexto de segurança
        System.out.println("logout");

        // Pode ser útil adicionar lógica adicional aqui, se necessário

        return ResponseEntity.ok().build();
    }

}