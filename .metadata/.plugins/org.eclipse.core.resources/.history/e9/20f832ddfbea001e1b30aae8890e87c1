package com.evision.config;

import java.util.Arrays;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import com.evision.security.JWTAuthenticationFilter;
import com.evision.security.Jwtutil;




@Configuration
@EnableWebSecurity
public class WebSecurityConfig{
	

    @Autowired
	private Environment env;
	@Autowired
	private Jwtutil jwtUtil;
	@Autowired
	private UserDetailsService userService;
	
	private static final String[] PUBLIC_MATCHERS = { "/" };

//	@Bean
//	protected void configure(HttpSecurity http) throws Exception {
//	   
//       http
//           .csrf(csrf -> csrf.disable()) // Avalie se é realmente necessário desabilitar o CSRF
//           .authorizeHttpRequests(authorize -> authorize
//               .requestMatchers("/", "/src/**", "/static/**", "/css/**", "/views/**", "/js/**", "/js/controllerLogin.js", "/cadastro", "/login/api/**").permitAll()
//               .requestMatchers("/api/usuarios/cad").permitAll()
//               .requestMatchers("/login/api/login").permitAll()
//               .requestMatchers("/cadastro").permitAll()
//               //.requestMatchers("/listagem").hasAuthority("ADMIN")
//               .requestMatchers("/listagem").hasAuthority("ADMIN")
//               //.requestMatchers("/listagem").hasAuthority("admin") // Corrija a autoridade, se necessário
//               .anyRequest().authenticated()
//           )
//           
//           .addFilterBefore(new JWTAuthenticationFilter(authenticationManager(null),jwtUtil), UsernamePasswordAuthenticationFilter.class) // Adiciona filtro JWT antes do padrão
//           .exceptionHandling(exception -> exception
//               .accessDeniedPage("/negado")
//           )
//           .sessionManagement(session -> session
//               .sessionCreationPolicy(SessionCreationPolicy.STATELESS) // JWT é stateless
//           );
//      // return http.build();
//   }
//	@Bean
//    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
//      http
//          .csrf(csrf -> csrf.disable()) // Avalie se é realmente necessário desabilitar o CSRF
//          .authorizeHttpRequests(authorize -> authorize
//              .requestMatchers("/", "/src/**", "/static/**", "/css/**", "/views/**", "/js/**", "/js/controllerLogin.js", "/cadastro", "/login/api/**").permitAll()
//              .requestMatchers("/api/usuarios/cad").permitAll()
//              .requestMatchers("/login/api/login").permitAll()
//              .requestMatchers("/cadastro").permitAll()
//              //.requestMatchers("/listagem").hasAuthority("ADMIN")
//              .requestMatchers("/listagem").hasAuthority("ADMIN")
//              //.requestMatchers("/listagem").hasAuthority("admin") // Corrija a autoridade, se necessário
//              .anyRequest().authenticated()
//          )
//          .formLogin(form -> form
//              .loginPage("/")
//              .loginProcessingUrl("/listagem")
//              //.defaultSuccessUrl("/listagem", true)
//              //.successForwardUrl("/listagem")
//              .failureUrl("/cadastro")
//          )
//          .addFilter(new JWTAuthenticationFilter(authenticationManager(null),jwtUtil)) // Adiciona filtro JWT antes do padrão
//         // .addFilter(new JWTAuthenticationFilter(JWTAuthorizationFilter(null),jwtUtil,userService))
//        .exceptionHandling(exception -> exception
//            .accessDeniedPage("/negado")
//        )
//        .sessionManagement(session -> session
//            .sessionCreationPolicy(SessionCreationPolicy.STATELESS) // JWT é stateless
//        );
//      return http.build();
//  }
//   

	protected void configure(HttpSecurity http) throws Exception {
//		if (Arrays.asList(env.getActiveProfiles()).contains("test")) {
//			http.headers().frameOptions().disable();
//		}

		http.csrf(csrf -> csrf.disable());
		http.addFilter(new JWTAuthenticationFilter(authenticationManager(null), jwtUtil));
		//http.addFilter(new JWTAuthorizationFilter(authenticationManager(), jwtUtil, userDetailsService));
		http.authorizeHttpRequests(authorize -> authorize
				.requestMatchers(PUBLIC_MATCHERS).permitAll().anyRequest().authenticated());

		http.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));
	}

    @Bean
	CorsConfigurationSource corsConfigurationSource() {
		CorsConfiguration configuration = new CorsConfiguration().applyPermitDefaultValues();
		configuration.setAllowedMethods(Arrays.asList("POST", "GET", "PUT", "DELETE", "OPTIONS"));
		final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
		source.registerCorsConfiguration("/**", configuration);
		return source;
	}

	
	public void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userService).passwordEncoder(bCryptPasswordEncoder());
    }

    @Bean
    AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
	    return  authenticationConfiguration.getAuthenticationManager();
	}
//	
//    
    @Bean
    BCryptPasswordEncoder bCryptPasswordEncoder() {
        return new BCryptPasswordEncoder();
    }
//    
//	 @Bean
//	 LogoutFilter logoutFilter() {
//	     LogoutFilter logoutFilter = new LogoutFilter(
//	         "/logout",
//	         new SecurityContextLogoutHandler());
//	     logoutFilter.setFilterProcessesUrl("/logout");
//	     return logoutFilter;
//	 }

}